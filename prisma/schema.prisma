generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String             @id @default(uuid()) @db.Uuid
  tokens      NotionOauthToken[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  CustomBlock CustomBlock[]

  // Next Auth.
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model NotionOauthToken {
  // Our stuff
  id             String   @id @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Notion's stuff
  access_token   String
  workspace_name String
  workspace_icon String
  bot_id         String
}

model CustomBlock {
  id              String       @id @db.Uuid
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       User         @relation(fields: [createdByUserId], references: [id])
  createdByUserId String       @db.Uuid
  // Editing
  State           Bytes
  // Permissions
  publicId        String       @default(uuid()) @db.Uuid
  publicAccess    BlockAction?
}

enum BlockAction {
  Read
  WriteState
  Write
}

// Next Auth

model Account {
  id                 String    @id @default(cuid())
  userId             String    @db.Uuid
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
